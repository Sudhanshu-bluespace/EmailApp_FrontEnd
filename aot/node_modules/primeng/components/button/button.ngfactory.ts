/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from 'primeng/components/button/button';
import * as import2 from '@angular/common/src/common_module';
import * as import3 from '@angular/common/src/localization';
import * as import4 from '@angular/core/src/di/injector';
import * as import5 from '@angular/core/src/i18n/tokens';
import * as import6 from '@angular/core/src/change_detection/change_detection_util';
import * as import7 from '@angular/core/src/linker/view';
import * as import8 from '@angular/core/src/linker/view_utils';
class ButtonModuleInjector extends import0.NgModuleInjector<import1.ButtonModule> {
  _CommonModule_0:import2.CommonModule;
  _ButtonModule_1:import1.ButtonModule;
  __NgLocalization_2:import3.NgLocaleLocalization;
  constructor(parent:import4.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _NgLocalization_2():import3.NgLocaleLocalization {
    if ((this.__NgLocalization_2 == null)) { (this.__NgLocalization_2 = new import3.NgLocaleLocalization(this.parent.get(import5.LOCALE_ID))); }
    return this.__NgLocalization_2;
  }
  createInternal():import1.ButtonModule {
    this._CommonModule_0 = new import2.CommonModule();
    this._ButtonModule_1 = new import1.ButtonModule();
    return this._ButtonModule_1;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.CommonModule)) { return this._CommonModule_0; }
    if ((token === import1.ButtonModule)) { return this._ButtonModule_1; }
    if ((token === import3.NgLocalization)) { return this._NgLocalization_2; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const ButtonModuleNgFactory:import0.NgModuleFactory<import1.ButtonModule> = new import0.NgModuleFactory(ButtonModuleInjector,import1.ButtonModule);
export class Wrapper_Button {
  /*private*/ _eventHandler:Function;
  context:import1.Button;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import1.Button(p0,p1);
    this._expr_0 = import6.UNINITIALIZED;
    this._expr_1 = import6.UNINITIALIZED;
    this._expr_2 = import6.UNINITIALIZED;
    this._expr_3 = import6.UNINITIALIZED;
    this._expr_4 = import6.UNINITIALIZED;
    this._expr_5 = import6.UNINITIALIZED;
    this._expr_6 = import6.UNINITIALIZED;
    this._expr_7 = import6.UNINITIALIZED;
  }
  ngOnDetach(view:import7.AppView<any>,componentView:import7.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
  }
  check_iconPos(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.iconPos = currValue;
      this._expr_0 = currValue;
    }
  }
  check_cornerStyleClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.cornerStyleClass = currValue;
      this._expr_1 = currValue;
    }
  }
  check_label(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.label = currValue;
      this._expr_2 = currValue;
    }
  }
  check_icon(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.icon = currValue;
      this._expr_3 = currValue;
    }
  }
  ngDoCheck(view:import7.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import7.AppView<any>,componentView:import7.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_4:any = (this.context.hover && !this.context.isDisabled());
    if (import8.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      view.renderer.setElementClass(el,'ui-state-hover',currVal_4);
      this._expr_4 = currVal_4;
    }
    const currVal_5:any = this.context.focus;
    if (import8.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      view.renderer.setElementClass(el,'ui-state-focus',currVal_5);
      this._expr_5 = currVal_5;
    }
    const currVal_6:any = this.context.active;
    if (import8.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      view.renderer.setElementClass(el,'ui-state-active',currVal_6);
      this._expr_6 = currVal_6;
    }
    const currVal_7:any = this.context.isDisabled();
    if (import8.checkBinding(throwOnChange,this._expr_7,currVal_7)) {
      view.renderer.setElementClass(el,'ui-state-disabled',currVal_7);
      this._expr_7 = currVal_7;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'mouseenter')) {
      const pd_sub_0:any = ((<any>this.context.onMouseenter($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'mouseleave')) {
      const pd_sub_1:any = ((<any>this.context.onMouseleave($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'mousedown')) {
      const pd_sub_2:any = ((<any>this.context.onMouseDown($event)) !== false);
      result = (pd_sub_2 && result);
    }
    if ((eventName == 'mouseup')) {
      const pd_sub_3:any = ((<any>this.context.onMouseUp($event)) !== false);
      result = (pd_sub_3 && result);
    }
    if ((eventName == 'focus')) {
      const pd_sub_4:any = ((<any>this.context.onFocus($event)) !== false);
      result = (pd_sub_4 && result);
    }
    if ((eventName == 'blur')) {
      const pd_sub_5:any = ((<any>this.context.onBlur($event)) !== false);
      result = (pd_sub_5 && result);
    }
    return result;
  }
  subscribe(view:import7.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}