/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from 'primeng/components/dragdrop/dragdrop';
import * as import2 from '@angular/common/src/common_module';
import * as import3 from '@angular/common/src/localization';
import * as import4 from '@angular/core/src/di/injector';
import * as import5 from '@angular/core/src/i18n/tokens';
import * as import6 from '@angular/core/src/change_detection/change_detection_util';
import * as import7 from '@angular/core/src/linker/view';
import * as import8 from '@angular/core/src/linker/view_utils';
class DragDropModuleInjector extends import0.NgModuleInjector<import1.DragDropModule> {
  _CommonModule_0:import2.CommonModule;
  _DragDropModule_1:import1.DragDropModule;
  __NgLocalization_2:import3.NgLocaleLocalization;
  constructor(parent:import4.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _NgLocalization_2():import3.NgLocaleLocalization {
    if ((this.__NgLocalization_2 == null)) { (this.__NgLocalization_2 = new import3.NgLocaleLocalization(this.parent.get(import5.LOCALE_ID))); }
    return this.__NgLocalization_2;
  }
  createInternal():import1.DragDropModule {
    this._CommonModule_0 = new import2.CommonModule();
    this._DragDropModule_1 = new import1.DragDropModule();
    return this._DragDropModule_1;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.CommonModule)) { return this._CommonModule_0; }
    if ((token === import1.DragDropModule)) { return this._DragDropModule_1; }
    if ((token === import3.NgLocalization)) { return this._NgLocalization_2; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const DragDropModuleNgFactory:import0.NgModuleFactory<import1.DragDropModule> = new import0.NgModuleFactory(DragDropModuleInjector,import1.DragDropModule);
export class Wrapper_Draggable {
  /*private*/ _eventHandler:Function;
  context:import1.Draggable;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import1.Draggable(p0,p1);
    this._expr_0 = import6.UNINITIALIZED;
    this._expr_1 = import6.UNINITIALIZED;
    this._expr_2 = import6.UNINITIALIZED;
    this._expr_3 = import6.UNINITIALIZED;
  }
  ngOnDetach(view:import7.AppView<any>,componentView:import7.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
  }
  check_scope(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.scope = currValue;
      this._expr_0 = currValue;
    }
  }
  check_dragEffect(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.dragEffect = currValue;
      this._expr_1 = currValue;
    }
  }
  check_dragHandle(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.dragHandle = currValue;
      this._expr_2 = currValue;
    }
  }
  ngDoCheck(view:import7.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import7.AppView<any>,componentView:import7.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_3:any = true;
    if (import8.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      view.renderer.setElementProperty(el,'draggable',currVal_3);
      this._expr_3 = currVal_3;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'dragstart')) {
      const pd_sub_0:any = ((<any>this.context.dragStart($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'drag')) {
      const pd_sub_1:any = ((<any>this.context.drag($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'dragend')) {
      const pd_sub_2:any = ((<any>this.context.dragEnd($event)) !== false);
      result = (pd_sub_2 && result);
    }
    if ((eventName == 'mouseover')) {
      const pd_sub_3:any = ((<any>this.context.mouseover($event)) !== false);
      result = (pd_sub_3 && result);
    }
    if ((eventName == 'mouseleave')) {
      const pd_sub_4:any = ((<any>this.context.mouseleave($event)) !== false);
      result = (pd_sub_4 && result);
    }
    return result;
  }
  subscribe(view:import7.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.onDragStart.subscribe(_eventHandler.bind(view,'onDragStart'))); }
    if (emit1) { (this.subscription1 = this.context.onDragEnd.subscribe(_eventHandler.bind(view,'onDragEnd'))); }
    if (emit2) { (this.subscription2 = this.context.onDrag.subscribe(_eventHandler.bind(view,'onDrag'))); }
  }
}
export class Wrapper_Droppable {
  /*private*/ _eventHandler:Function;
  context:import1.Droppable;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  subscription3:any;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import1.Droppable(p0,p1);
    this._expr_0 = import6.UNINITIALIZED;
    this._expr_1 = import6.UNINITIALIZED;
  }
  ngOnDetach(view:import7.AppView<any>,componentView:import7.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
    (this.subscription3 && this.subscription3.unsubscribe());
  }
  check_scope(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.scope = currValue;
      this._expr_0 = currValue;
    }
  }
  check_dropEffect(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.dropEffect = currValue;
      this._expr_1 = currValue;
    }
  }
  ngDoCheck(view:import7.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import7.AppView<any>,componentView:import7.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'drop')) {
      const pd_sub_0:any = ((<any>this.context.drop($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'dragenter')) {
      const pd_sub_1:any = ((<any>this.context.dragEnter($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'dragleave')) {
      const pd_sub_2:any = ((<any>this.context.dragLeave($event)) !== false);
      result = (pd_sub_2 && result);
    }
    if ((eventName == 'dragover')) {
      const pd_sub_3:any = ((<any>this.context.dragOver($event)) !== false);
      result = (pd_sub_3 && result);
    }
    return result;
  }
  subscribe(view:import7.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean,emit3:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.onDragEnter.subscribe(_eventHandler.bind(view,'onDragEnter'))); }
    if (emit1) { (this.subscription1 = this.context.onDragLeave.subscribe(_eventHandler.bind(view,'onDragLeave'))); }
    if (emit2) { (this.subscription2 = this.context.onDrop.subscribe(_eventHandler.bind(view,'onDrop'))); }
    if (emit3) { (this.subscription3 = this.context.onDragOver.subscribe(_eventHandler.bind(view,'onDragOver'))); }
  }
}