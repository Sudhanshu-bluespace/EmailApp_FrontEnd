/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from 'primeng/components/fieldset/fieldset';
import * as import2 from '@angular/common/src/common_module';
import * as import3 from '@angular/common/src/localization';
import * as import4 from '@angular/core/src/di/injector';
import * as import5 from '@angular/core/src/i18n/tokens';
import * as import6 from '@angular/core/src/change_detection/change_detection_util';
import * as import7 from '@angular/core/src/linker/view';
import * as import8 from '@angular/core/src/linker/view_utils';
import * as import9 from '@angular/core/src/render/api';
import * as import10 from '@angular/core/src/metadata/view';
import * as import11 from '@angular/core/src/linker/view_type';
import * as import12 from '@angular/core/src/change_detection/constants';
import * as import13 from '@angular/core/src/linker/component_factory';
import * as import14 from '@angular/core/src/linker/element_ref';
import * as import15 from '@angular/core/src/animation/animation_transition';
import * as import16 from '@angular/core/src/animation/animation_sequence_player';
import * as import17 from '@angular/core/src/animation/animation_styles';
import * as import18 from '@angular/core/src/animation/animation_style_util';
import * as import19 from '@angular/core/src/animation/animation_keyframe';
import * as import20 from '@angular/core/src/animation/animation_player';
import * as import21 from '../../../@angular/common/src/directives/ng_class.ngfactory';
import * as import22 from '@angular/core/src/linker/view_container';
import * as import23 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import24 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import25 from '@angular/common/src/directives/ng_class';
import * as import26 from '../../../@angular/common/src/directives/ng_style.ngfactory';
import * as import27 from '../../../@angular/common/src/directives/ng_if.ngfactory';
import * as import28 from '@angular/core/src/linker/template_ref';
import * as import29 from '@angular/common/src/directives/ng_if';
import * as import30 from '@angular/common/src/directives/ng_style';
class FieldsetModuleInjector extends import0.NgModuleInjector<import1.FieldsetModule> {
  _CommonModule_0:import2.CommonModule;
  _FieldsetModule_1:import1.FieldsetModule;
  __NgLocalization_2:import3.NgLocaleLocalization;
  constructor(parent:import4.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _NgLocalization_2():import3.NgLocaleLocalization {
    if ((this.__NgLocalization_2 == null)) { (this.__NgLocalization_2 = new import3.NgLocaleLocalization(this.parent.get(import5.LOCALE_ID))); }
    return this.__NgLocalization_2;
  }
  createInternal():import1.FieldsetModule {
    this._CommonModule_0 = new import2.CommonModule();
    this._FieldsetModule_1 = new import1.FieldsetModule();
    return this._FieldsetModule_1;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.CommonModule)) { return this._CommonModule_0; }
    if ((token === import1.FieldsetModule)) { return this._FieldsetModule_1; }
    if ((token === import3.NgLocalization)) { return this._NgLocalization_2; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const FieldsetModuleNgFactory:import0.NgModuleFactory<import1.FieldsetModule> = new import0.NgModuleFactory(FieldsetModuleInjector,import1.FieldsetModule);
export class Wrapper_Fieldset {
  /*private*/ _eventHandler:Function;
  context:import1.Fieldset;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  subscription0:any;
  subscription1:any;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import1.Fieldset(p0);
    this._expr_0 = import6.UNINITIALIZED;
    this._expr_1 = import6.UNINITIALIZED;
    this._expr_2 = import6.UNINITIALIZED;
    this._expr_3 = import6.UNINITIALIZED;
    this._expr_4 = import6.UNINITIALIZED;
  }
  ngOnDetach(view:import7.AppView<any>,componentView:import7.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
  }
  check_legend(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.legend = currValue;
      this._expr_0 = currValue;
    }
  }
  check_toggleable(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.toggleable = currValue;
      this._expr_1 = currValue;
    }
  }
  check_collapsed(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.collapsed = currValue;
      this._expr_2 = currValue;
    }
  }
  check_style(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.style = currValue;
      this._expr_3 = currValue;
    }
  }
  check_styleClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.styleClass = currValue;
      this._expr_4 = currValue;
    }
  }
  ngDoCheck(view:import7.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import7.AppView<any>,componentView:import7.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import7.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.onBeforeToggle.subscribe(_eventHandler.bind(view,'onBeforeToggle'))); }
    if (emit1) { (this.subscription1 = this.context.onAfterToggle.subscribe(_eventHandler.bind(view,'onAfterToggle'))); }
  }
}
var renderType_Fieldset_Host:import9.RenderComponentType = import8.createRenderComponentType('',0,import10.ViewEncapsulation.None,([] as any[]),{});
class View_Fieldset_Host0 extends import7.AppView<any> {
  _el_0:any;
  compView_0:import7.AppView<import1.Fieldset>;
  _Fieldset_0_3:Wrapper_Fieldset;
  constructor(viewUtils:import8.ViewUtils,parentView:import7.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_Fieldset_Host0,renderType_Fieldset_Host,import11.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import12.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import13.ComponentRef<any> {
    this._el_0 = import8.selectOrCreateRenderHostElement(this.renderer,'p-fieldset',import8.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_Fieldset0(this.viewUtils,this,0,this._el_0);
    this._Fieldset_0_3 = new Wrapper_Fieldset(new import14.ElementRef(this._el_0));
    this.compView_0.create(this._Fieldset_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import13.ComponentRef_<any>(0,this,this._el_0,this._Fieldset_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.Fieldset) && (0 === requestNodeIndex))) { return this._Fieldset_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._Fieldset_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._Fieldset_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
}
export const FieldsetNgFactory:import13.ComponentFactory<import1.Fieldset> = new import13.ComponentFactory<import1.Fieldset>('p-fieldset',View_Fieldset_Host0,import1.Fieldset);
const styles_Fieldset:any[] = ([] as any[]);
var Fieldset_fieldsetContent_states:any = {
  'hidden': {'height': '0px'},
  'visible': {'height': '*'},
  '*': {}
}
;
function Fieldset_fieldsetContent_factory(view:import7.AppView<any>,element:any,currentState:any,nextState:any):import15.AnimationTransition {
  var previousPlayers:any = view.animationContext.getAnimationPlayers(element,((nextState == 'void')? (null as any): 'fieldsetContent'));
  var collectedStyles:any = {};
  var player:any = (null as any);
  var totalTime:any = 0;
  var defaultStateStyles:any = Fieldset_fieldsetContent_states['*'];
  var startStateStyles:any = Fieldset_fieldsetContent_states[currentState];
  if ((startStateStyles == (null as any))) { (startStateStyles = defaultStateStyles); }
  var endStateStyles:any = Fieldset_fieldsetContent_states[nextState];
  if ((endStateStyles == (null as any))) { (endStateStyles = defaultStateStyles); }
  if (((player == (null as any)) && ((currentState == 'visible') && (nextState == 'hidden')))) {
      player = new import16.AnimationSequencePlayer([view.renderer.animate(element,new import17.AnimationStyles(import18.collectAndResolveStyles(collectedStyles,[startStateStyles])),import18.balanceAnimationKeyframes(collectedStyles,endStateStyles,[
        new import19.AnimationKeyframe(0,new import17.AnimationStyles(import18.collectAndResolveStyles(collectedStyles,[{}]))),
        new import19.AnimationKeyframe(1,new import17.AnimationStyles(import18.collectAndResolveStyles(collectedStyles,[{}])))
      ]
    ),400,0,'cubic-bezier(0.86, 0, 0.07, 1)',previousPlayers)]);
    totalTime = 400;
  }
  if (((player == (null as any)) && ((currentState == 'hidden') && (nextState == 'visible')))) {
      player = new import16.AnimationSequencePlayer([view.renderer.animate(element,new import17.AnimationStyles(import18.collectAndResolveStyles(collectedStyles,[startStateStyles])),import18.balanceAnimationKeyframes(collectedStyles,endStateStyles,[
        new import19.AnimationKeyframe(0,new import17.AnimationStyles(import18.collectAndResolveStyles(collectedStyles,[{}]))),
        new import19.AnimationKeyframe(1,new import17.AnimationStyles(import18.collectAndResolveStyles(collectedStyles,[{}])))
      ]
    ),400,0,'cubic-bezier(0.86, 0, 0.07, 1)',previousPlayers)]);
    totalTime = 400;
  }
  if ((player == (null as any))) { (player = new import20.NoOpAnimationPlayer()); }
  player.onDone(():void => {
    player.destroy();
    import18.renderStyles(element,view.renderer,import18.prepareFinalAnimationStyles(startStateStyles,endStateStyles));
  });
  new import16.AnimationSequencePlayer(previousPlayers).destroy();
  import18.renderStyles(element,view.renderer,import18.clearStyles(startStateStyles));
  view.animationContext.queueAnimation(element,'fieldsetContent',player);
  return new import15.AnimationTransition(player,currentState,nextState,totalTime);
}
class View_Fieldset1 extends import7.AppView<any> {
  _el_0:any;
  _NgClass_0_3:import21.Wrapper_NgClass;
  _map_2:any;
  constructor(viewUtils:import8.ViewUtils,parentView:import7.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import22.ViewContainer) {
    super(View_Fieldset1,renderType_Fieldset,import11.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import12.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
    this._map_2 = import8.pureProxy2((p0:any,p1:any):{[key: string]:any} => {
      return {
        'fa-minus': p0,
        'fa-plus': p1
      }
      ;
    });
  }
  createInternal(rootSelector:string):import13.ComponentRef<any> {
    this._el_0 = import8.createRenderElement(this.renderer,(null as any),'span',new import8.InlineArray2(2,'class','ui-fieldset-toggler fa fa-w'),(null as any));
    this._NgClass_0_3 = new import21.Wrapper_NgClass(this.parentView.parentView.injectorGet(import23.IterableDiffers,this.parentView.parentIndex),this.parentView.parentView.injectorGet(import24.KeyValueDiffers,this.parentView.parentIndex),new import14.ElementRef(this._el_0),this.renderer);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import25.NgClass) && (0 === requestNodeIndex))) { return this._NgClass_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = 'ui-fieldset-toggler fa fa-w';
    this._NgClass_0_3.check_klass(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = this._map_2(!this.parentView.context.collapsed,this.parentView.context.collapsed);
    this._NgClass_0_3.check_ngClass(currVal_0_0_1,throwOnChange,false);
    this._NgClass_0_3.ngDoCheck(this,this._el_0,throwOnChange);
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
var renderType_Fieldset:import9.RenderComponentType = import8.createRenderComponentType('',1,import10.ViewEncapsulation.None,styles_Fieldset,{'fieldsetContent': Fieldset_fieldsetContent_factory});
export class View_Fieldset0 extends import7.AppView<import1.Fieldset> {
  _text_0:any;
  _el_1:any;
  _NgClass_1_3:import21.Wrapper_NgClass;
  _NgStyle_1_4:import26.Wrapper_NgStyle;
  _text_2:any;
  _el_3:any;
  _NgClass_3_3:import21.Wrapper_NgClass;
  _text_4:any;
  _anchor_5:any;
  /*private*/ _vc_5:import22.ViewContainer;
  _TemplateRef_5_5:any;
  _NgIf_5_6:import27.Wrapper_NgIf;
  _text_6:any;
  _text_7:any;
  _el_8:any;
  _NgClass_8_3:import21.Wrapper_NgClass;
  _text_9:any;
  _el_10:any;
  _text_11:any;
  _text_12:any;
  _text_13:any;
  _text_14:any;
  _text_15:any;
  _map_23:any;
  _map_24:any;
  /*private*/ _expr_25:any;
  /*private*/ _expr_26:any;
  _map_27:any;
  constructor(viewUtils:import8.ViewUtils,parentView:import7.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_Fieldset0,renderType_Fieldset,import11.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import12.ChangeDetectorStatus.CheckAlways);
    this._map_23 = import8.pureProxy2((p0:any,p1:any):{[key: string]:any} => {
      return {
        'ui-fieldset ui-widget ui-widget-content ui-corner-all': p0,
        'ui-fieldset-toggleable': p1
      }
      ;
    });
    this._map_24 = import8.pureProxy1((p0:any):{[key: string]:any} => {
      return {'ui-state-hover': p0};
    });
    this._expr_25 = import6.UNINITIALIZED;
    this._expr_26 = import6.UNINITIALIZED;
    this._map_27 = import8.pureProxy1((p0:any):{[key: string]:any} => {
      return {'ui-fieldset-content-wrapper-overflown': p0};
    });
  }
  createInternal(rootSelector:string):import13.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n        ',(null as any));
    this._el_1 = import8.createRenderElement(this.renderer,parentRenderNode,'fieldset',import8.EMPTY_INLINE_ARRAY,(null as any));
    this._NgClass_1_3 = new import21.Wrapper_NgClass(this.parentView.injectorGet(import23.IterableDiffers,this.parentIndex),this.parentView.injectorGet(import24.KeyValueDiffers,this.parentIndex),new import14.ElementRef(this._el_1),this.renderer);
    this._NgStyle_1_4 = new import26.Wrapper_NgStyle(this.parentView.injectorGet(import24.KeyValueDiffers,this.parentIndex),new import14.ElementRef(this._el_1),this.renderer);
    this._text_2 = this.renderer.createText(this._el_1,'\n            ',(null as any));
    this._el_3 = import8.createRenderElement(this.renderer,this._el_1,'legend',new import8.InlineArray2(2,'class','ui-fieldset-legend ui-corner-all ui-state-default ui-unselectable-text'),(null as any));
    this._NgClass_3_3 = new import21.Wrapper_NgClass(this.parentView.injectorGet(import23.IterableDiffers,this.parentIndex),this.parentView.injectorGet(import24.KeyValueDiffers,this.parentIndex),new import14.ElementRef(this._el_3),this.renderer);
    this._text_4 = this.renderer.createText(this._el_3,'\n                ',(null as any));
    this._anchor_5 = this.renderer.createTemplateAnchor(this._el_3,(null as any));
    this._vc_5 = new import22.ViewContainer(5,3,this,this._anchor_5);
    this._TemplateRef_5_5 = new import28.TemplateRef_(this,5,this._anchor_5);
    this._NgIf_5_6 = new import27.Wrapper_NgIf(this._vc_5.vcRef,this._TemplateRef_5_5);
    this._text_6 = this.renderer.createText(this._el_3,'',(null as any));
    this._text_7 = this.renderer.createText(this._el_1,'\n            ',(null as any));
    this._el_8 = import8.createRenderElement(this.renderer,this._el_1,'div',new import8.InlineArray2(2,'class','ui-fieldset-content-wrapper'),(null as any));
    this._NgClass_8_3 = new import21.Wrapper_NgClass(this.parentView.injectorGet(import23.IterableDiffers,this.parentIndex),this.parentView.injectorGet(import24.KeyValueDiffers,this.parentIndex),new import14.ElementRef(this._el_8),this.renderer);
    this._text_9 = this.renderer.createText(this._el_8,'\n                ',(null as any));
    this._el_10 = import8.createRenderElement(this.renderer,this._el_8,'div',new import8.InlineArray2(2,'class','ui-fieldset-content'),(null as any));
    this._text_11 = this.renderer.createText(this._el_10,'\n                    ',(null as any));
    this.projectNodes(this._el_10,0);
    this._text_12 = this.renderer.createText(this._el_10,'\n                ',(null as any));
    this._text_13 = this.renderer.createText(this._el_8,'\n            ',(null as any));
    this._text_14 = this.renderer.createText(this._el_1,'\n        ',(null as any));
    this._text_15 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    var disposable_0:Function = import8.subscribeToRenderElement(this,this._el_3,new import8.InlineArray8(6,'mouseenter',(null as any),'mouseleave',(null as any),'click',(null as any)),this.eventHandler(this.handleEvent_3));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._anchor_5,
      this._text_6,
      this._text_7,
      this._el_8,
      this._text_9,
      this._el_10,
      this._text_11,
      this._text_12,
      this._text_13,
      this._text_14,
      this._text_15
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import28.TemplateRef) && (5 === requestNodeIndex))) { return this._TemplateRef_5_5; }
    if (((token === import29.NgIf) && (5 === requestNodeIndex))) { return this._NgIf_5_6.context; }
    if (((token === import25.NgClass) && ((3 <= requestNodeIndex) && (requestNodeIndex <= 6)))) { return this._NgClass_3_3.context; }
    if (((token === import25.NgClass) && ((8 <= requestNodeIndex) && (requestNodeIndex <= 13)))) { return this._NgClass_8_3.context; }
    if (((token === import25.NgClass) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 14)))) { return this._NgClass_1_3.context; }
    if (((token === import30.NgStyle) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 14)))) { return this._NgStyle_1_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_26:any = (this.context.collapsed? 'hidden': 'visible');
    if (import8.checkBinding(throwOnChange,this._expr_26,currVal_26)) {
      var animationTransition_fieldsetContent:any = this.componentType.animations['fieldsetContent'](this,this._el_8,((this._expr_26 == import6.UNINITIALIZED)? 'void': this._expr_26),((currVal_26 == import6.UNINITIALIZED)? 'void': currVal_26));
      this._expr_26 = currVal_26;
    }
    const currVal_1_0_0:any = this.context.styleClass;
    this._NgClass_1_3.check_klass(currVal_1_0_0,throwOnChange,false);
    const currVal_1_0_1:any = this._map_23(true,this.context.toggleable);
    this._NgClass_1_3.check_ngClass(currVal_1_0_1,throwOnChange,false);
    this._NgClass_1_3.ngDoCheck(this,this._el_1,throwOnChange);
    const currVal_1_1_0:any = this.context.style;
    this._NgStyle_1_4.check_ngStyle(currVal_1_1_0,throwOnChange,false);
    this._NgStyle_1_4.ngDoCheck(this,this._el_1,throwOnChange);
    const currVal_3_0_0:any = 'ui-fieldset-legend ui-corner-all ui-state-default ui-unselectable-text';
    this._NgClass_3_3.check_klass(currVal_3_0_0,throwOnChange,false);
    const currVal_3_0_1:any = this._map_24(this.context.hover);
    this._NgClass_3_3.check_ngClass(currVal_3_0_1,throwOnChange,false);
    this._NgClass_3_3.ngDoCheck(this,this._el_3,throwOnChange);
    const currVal_5_0_0:any = this.context.toggleable;
    this._NgIf_5_6.check_ngIf(currVal_5_0_0,throwOnChange,false);
    this._NgIf_5_6.ngDoCheck(this,this._anchor_5,throwOnChange);
    const currVal_8_0_0:any = 'ui-fieldset-content-wrapper';
    this._NgClass_8_3.check_klass(currVal_8_0_0,throwOnChange,false);
    const currVal_8_0_1:any = this._map_27((this.context.collapsed || this.context.animating));
    this._NgClass_8_3.check_ngClass(currVal_8_0_1,throwOnChange,false);
    this._NgClass_8_3.ngDoCheck(this,this._el_8,throwOnChange);
    this._vc_5.detectChangesInNestedViews(throwOnChange);
    const currVal_25:any = import8.inlineInterpolate(1,'\n                ',this.context.legend,'\n            ');
    if (import8.checkBinding(throwOnChange,this._expr_25,currVal_25)) {
      this.renderer.setText(this._text_6,currVal_25);
      this._expr_25 = currVal_25;
    }
  }
  destroyInternal():void {
    this._vc_5.destroyNestedViews();
  }
  detachInternal():void {
    var animationTransition_fieldsetContent:any = this.componentType.animations['fieldsetContent'](this,this._el_8,this._expr_26,'void');
  }
  createEmbeddedViewInternal(nodeIndex:number):import7.AppView<any> {
    if ((nodeIndex == 5)) { return new View_Fieldset1(this.viewUtils,this,5,this._anchor_5,this._vc_5); }
    return (null as any);
  }
  handleEvent_3(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'mouseenter')) {
      const pd_sub_0:any = ((<any>this.context.onLegendMouseenter($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'mouseleave')) {
      const pd_sub_1:any = ((<any>this.context.onLegendMouseleave($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'click')) {
      const pd_sub_2:any = ((<any>this.context.toggle($event)) !== false);
      result = (pd_sub_2 && result);
    }
    return result;
  }
}