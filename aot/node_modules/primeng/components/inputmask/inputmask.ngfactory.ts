/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from 'primeng/components/inputmask/inputmask';
import * as import2 from '@angular/common/src/common_module';
import * as import3 from 'primeng/components/inputtext/inputtext';
import * as import4 from '@angular/common/src/localization';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/i18n/tokens';
import * as import7 from '@angular/core/src/change_detection/change_detection_util';
import * as import8 from '@angular/core/src/linker/view';
import * as import9 from '@angular/core/src/linker/view_utils';
import * as import10 from '@angular/core/src/render/api';
import * as import11 from '@angular/core/src/metadata/view';
import * as import12 from 'primeng/components/dom/domhandler';
import * as import13 from '@angular/core/src/linker/view_type';
import * as import14 from '@angular/core/src/change_detection/constants';
import * as import15 from '@angular/core/src/linker/component_factory';
import * as import16 from '@angular/core/src/linker/element_ref';
import * as import17 from '@angular/forms/src/directives/control_value_accessor';
import * as import18 from '../../../@angular/common/src/directives/ng_class.ngfactory';
import * as import19 from '../../../@angular/common/src/directives/ng_style.ngfactory';
import * as import20 from '../inputtext/inputtext.ngfactory';
import * as import21 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import22 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import23 from '@angular/common/src/directives/ng_class';
import * as import24 from '@angular/common/src/directives/ng_style';
class InputMaskModuleInjector extends import0.NgModuleInjector<import1.InputMaskModule> {
  _CommonModule_0:import2.CommonModule;
  _InputTextModule_1:import3.InputTextModule;
  _InputMaskModule_2:import1.InputMaskModule;
  __NgLocalization_3:import4.NgLocaleLocalization;
  constructor(parent:import5.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _NgLocalization_3():import4.NgLocaleLocalization {
    if ((this.__NgLocalization_3 == null)) { (this.__NgLocalization_3 = new import4.NgLocaleLocalization(this.parent.get(import6.LOCALE_ID))); }
    return this.__NgLocalization_3;
  }
  createInternal():import1.InputMaskModule {
    this._CommonModule_0 = new import2.CommonModule();
    this._InputTextModule_1 = new import3.InputTextModule();
    this._InputMaskModule_2 = new import1.InputMaskModule();
    return this._InputMaskModule_2;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.CommonModule)) { return this._CommonModule_0; }
    if ((token === import3.InputTextModule)) { return this._InputTextModule_1; }
    if ((token === import1.InputMaskModule)) { return this._InputMaskModule_2; }
    if ((token === import4.NgLocalization)) { return this._NgLocalization_3; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const InputMaskModuleNgFactory:import0.NgModuleFactory<import1.InputMaskModule> = new import0.NgModuleFactory(InputMaskModuleInjector,import1.InputMaskModule);
export class Wrapper_InputMask {
  /*private*/ _eventHandler:Function;
  context:import1.InputMask;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  /*private*/ _expr_11:any;
  /*private*/ _expr_12:any;
  /*private*/ _expr_13:any;
  /*private*/ _expr_14:any;
  /*private*/ _expr_15:any;
  subscription0:any;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import1.InputMask(p0,p1);
    this._expr_0 = import7.UNINITIALIZED;
    this._expr_1 = import7.UNINITIALIZED;
    this._expr_2 = import7.UNINITIALIZED;
    this._expr_3 = import7.UNINITIALIZED;
    this._expr_4 = import7.UNINITIALIZED;
    this._expr_5 = import7.UNINITIALIZED;
    this._expr_6 = import7.UNINITIALIZED;
    this._expr_7 = import7.UNINITIALIZED;
    this._expr_8 = import7.UNINITIALIZED;
    this._expr_9 = import7.UNINITIALIZED;
    this._expr_10 = import7.UNINITIALIZED;
    this._expr_11 = import7.UNINITIALIZED;
    this._expr_12 = import7.UNINITIALIZED;
    this._expr_13 = import7.UNINITIALIZED;
    this._expr_14 = import7.UNINITIALIZED;
    this._expr_15 = import7.UNINITIALIZED;
  }
  ngOnDetach(view:import8.AppView<any>,componentView:import8.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
    (this.subscription0 && this.subscription0.unsubscribe());
  }
  check_mask(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.mask = currValue;
      this._expr_0 = currValue;
    }
  }
  check_type(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.type = currValue;
      this._expr_1 = currValue;
    }
  }
  check_slotChar(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.slotChar = currValue;
      this._expr_2 = currValue;
    }
  }
  check_autoClear(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.autoClear = currValue;
      this._expr_3 = currValue;
    }
  }
  check_style(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.style = currValue;
      this._expr_4 = currValue;
    }
  }
  check_styleClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.styleClass = currValue;
      this._expr_5 = currValue;
    }
  }
  check_placeholder(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context.placeholder = currValue;
      this._expr_6 = currValue;
    }
  }
  check_size(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this._changed = true;
      this.context.size = currValue;
      this._expr_7 = currValue;
    }
  }
  check_maxlength(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_8,currValue))) {
      this._changed = true;
      this.context.maxlength = currValue;
      this._expr_8 = currValue;
    }
  }
  check_tabindex(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_9,currValue))) {
      this._changed = true;
      this.context.tabindex = currValue;
      this._expr_9 = currValue;
    }
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_10,currValue))) {
      this._changed = true;
      this.context.disabled = currValue;
      this._expr_10 = currValue;
    }
  }
  check_readonly(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_11,currValue))) {
      this._changed = true;
      this.context.readonly = currValue;
      this._expr_11 = currValue;
    }
  }
  check_unmask(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_12,currValue))) {
      this._changed = true;
      this.context.unmask = currValue;
      this._expr_12 = currValue;
    }
  }
  check_name(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_13,currValue))) {
      this._changed = true;
      this.context.name = currValue;
      this._expr_13 = currValue;
    }
  }
  ngDoCheck(view:import8.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import8.AppView<any>,componentView:import8.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_14:any = this.context.filled;
    if (import9.checkBinding(throwOnChange,this._expr_14,currVal_14)) {
      view.renderer.setElementClass(el,'ui-inputwrapper-filled',currVal_14);
      this._expr_14 = currVal_14;
    }
    const currVal_15:any = this.context.focus;
    if (import9.checkBinding(throwOnChange,this._expr_15,currVal_15)) {
      view.renderer.setElementClass(el,'ui-inputwrapper-focus',currVal_15);
      this._expr_15 = currVal_15;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import8.AppView<any>,_eventHandler:any,emit0:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.onComplete.subscribe(_eventHandler.bind(view,'onComplete'))); }
  }
}
var renderType_InputMask_Host:import10.RenderComponentType = import9.createRenderComponentType('',0,import11.ViewEncapsulation.None,([] as any[]),{});
class View_InputMask_Host0 extends import8.AppView<any> {
  _el_0:any;
  compView_0:import8.AppView<import1.InputMask>;
  _DomHandler_0_3:import12.DomHandler;
  _InputMask_0_4:Wrapper_InputMask;
  __NG_VALUE_ACCESSOR_0_5:any[];
  constructor(viewUtils:import9.ViewUtils,parentView:import8.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_InputMask_Host0,renderType_InputMask_Host,import13.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import14.ChangeDetectorStatus.CheckAlways);
  }
  get _NG_VALUE_ACCESSOR_0_5():any[] {
    if ((this.__NG_VALUE_ACCESSOR_0_5 == null)) { (this.__NG_VALUE_ACCESSOR_0_5 = [this._InputMask_0_4.context]); }
    return this.__NG_VALUE_ACCESSOR_0_5;
  }
  createInternal(rootSelector:string):import15.ComponentRef<any> {
    this._el_0 = import9.selectOrCreateRenderHostElement(this.renderer,'p-inputMask',import9.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_InputMask0(this.viewUtils,this,0,this._el_0);
    this._DomHandler_0_3 = new import12.DomHandler();
    this._InputMask_0_4 = new Wrapper_InputMask(new import16.ElementRef(this._el_0),this._DomHandler_0_3);
    this.compView_0.create(this._InputMask_0_4.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import15.ComponentRef_<any>(0,this,this._el_0,this._InputMask_0_4.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import12.DomHandler) && (0 === requestNodeIndex))) { return this._DomHandler_0_3; }
    if (((token === import1.InputMask) && (0 === requestNodeIndex))) { return this._InputMask_0_4.context; }
    if (((token === import17.NG_VALUE_ACCESSOR) && (0 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_0_5; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._InputMask_0_4.ngDoCheck(this,this._el_0,throwOnChange);
    this._InputMask_0_4.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._InputMask_0_4.context.ngAfterViewInit(); } }
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._InputMask_0_4.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const InputMaskNgFactory:import15.ComponentFactory<import1.InputMask> = new import15.ComponentFactory<import1.InputMask>('p-inputMask',View_InputMask_Host0,import1.InputMask);
const styles_InputMask:any[] = ([] as any[]);
var renderType_InputMask:import10.RenderComponentType = import9.createRenderComponentType('',0,import11.ViewEncapsulation.None,styles_InputMask,{});
export class View_InputMask0 extends import8.AppView<import1.InputMask> {
  _el_0:any;
  _NgClass_0_3:import18.Wrapper_NgClass;
  _NgStyle_0_4:import19.Wrapper_NgStyle;
  _InputText_0_5:import20.Wrapper_InputText;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  /*private*/ _expr_11:any;
  /*private*/ _expr_12:any;
  constructor(viewUtils:import9.ViewUtils,parentView:import8.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_InputMask0,renderType_InputMask,import13.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import14.ChangeDetectorStatus.CheckAlways);
    this._expr_4 = import7.UNINITIALIZED;
    this._expr_5 = import7.UNINITIALIZED;
    this._expr_6 = import7.UNINITIALIZED;
    this._expr_7 = import7.UNINITIALIZED;
    this._expr_8 = import7.UNINITIALIZED;
    this._expr_9 = import7.UNINITIALIZED;
    this._expr_10 = import7.UNINITIALIZED;
    this._expr_11 = import7.UNINITIALIZED;
    this._expr_12 = import7.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import15.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import9.createRenderElement(this.renderer,parentRenderNode,'input',new import9.InlineArray2(2,'pInputText',''),(null as any));
    this._NgClass_0_3 = new import18.Wrapper_NgClass(this.parentView.injectorGet(import21.IterableDiffers,this.parentIndex),this.parentView.injectorGet(import22.KeyValueDiffers,this.parentIndex),new import16.ElementRef(this._el_0),this.renderer);
    this._NgStyle_0_4 = new import19.Wrapper_NgStyle(this.parentView.injectorGet(import22.KeyValueDiffers,this.parentIndex),new import16.ElementRef(this._el_0),this.renderer);
    this._InputText_0_5 = new import20.Wrapper_InputText(new import16.ElementRef(this._el_0));
    var disposable_0:Function = import9.subscribeToRenderElement(this,this._el_0,new import9.InlineArray16(16,'focus',(null as any),'blur',(null as any),'keydown',(null as any),'keypress',(null as any),'input',(null as any),'paste',(null as any),'mouseover',(null as any),'mouseout',(null as any)),this.eventHandler(this.handleEvent_0));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import23.NgClass) && (0 === requestNodeIndex))) { return this._NgClass_0_3.context; }
    if (((token === import24.NgStyle) && (0 === requestNodeIndex))) { return this._NgStyle_0_4.context; }
    if (((token === import3.InputText) && (0 === requestNodeIndex))) { return this._InputText_0_5.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.context.styleClass;
    this._NgClass_0_3.check_ngClass(currVal_0_0_0,throwOnChange,false);
    this._NgClass_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_0_1_0:any = this.context.style;
    this._NgStyle_0_4.check_ngStyle(currVal_0_1_0,throwOnChange,false);
    this._NgStyle_0_4.ngDoCheck(this,this._el_0,throwOnChange);
    this._InputText_0_5.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_4:any = this.context.type;
    if (import9.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      this.renderer.setElementAttribute(this._el_0,'type',((currVal_4 == null)? (null as any): currVal_4.toString()));
      this._expr_4 = currVal_4;
    }
    const currVal_5:any = this.context.name;
    if (import9.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      this.renderer.setElementAttribute(this._el_0,'name',((currVal_5 == null)? (null as any): currVal_5.toString()));
      this._expr_5 = currVal_5;
    }
    const currVal_6:any = (this.context.value || '');
    if (import9.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      this.renderer.setElementProperty(this._el_0,'value',currVal_6);
      this._expr_6 = currVal_6;
    }
    const currVal_7:any = this.context.placeholder;
    if (import9.checkBinding(throwOnChange,this._expr_7,currVal_7)) {
      this.renderer.setElementAttribute(this._el_0,'placeholder',((currVal_7 == null)? (null as any): currVal_7.toString()));
      this._expr_7 = currVal_7;
    }
    const currVal_8:any = this.context.size;
    if (import9.checkBinding(throwOnChange,this._expr_8,currVal_8)) {
      this.renderer.setElementAttribute(this._el_0,'size',((currVal_8 == null)? (null as any): currVal_8.toString()));
      this._expr_8 = currVal_8;
    }
    const currVal_9:any = this.context.maxlength;
    if (import9.checkBinding(throwOnChange,this._expr_9,currVal_9)) {
      this.renderer.setElementAttribute(this._el_0,'maxlength',((currVal_9 == null)? (null as any): currVal_9.toString()));
      this._expr_9 = currVal_9;
    }
    const currVal_10:any = this.context.tabindex;
    if (import9.checkBinding(throwOnChange,this._expr_10,currVal_10)) {
      this.renderer.setElementAttribute(this._el_0,'tabindex',((currVal_10 == null)? (null as any): currVal_10.toString()));
      this._expr_10 = currVal_10;
    }
    const currVal_11:any = this.context.disabled;
    if (import9.checkBinding(throwOnChange,this._expr_11,currVal_11)) {
      this.renderer.setElementProperty(this._el_0,'disabled',currVal_11);
      this._expr_11 = currVal_11;
    }
    const currVal_12:any = this.context.readonly;
    if (import9.checkBinding(throwOnChange,this._expr_12,currVal_12)) {
      this.renderer.setElementProperty(this._el_0,'readOnly',currVal_12);
      this._expr_12 = currVal_12;
    }
    this._InputText_0_5.checkHost(this,this,this._el_0,throwOnChange);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._InputText_0_5.handleEvent(eventName,$event) && result);
    if ((eventName == 'focus')) {
      const pd_sub_0:any = ((<any>this.context.onFocus($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'blur')) {
      const pd_sub_1:any = ((<any>this.context.onBlur($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'keydown')) {
      const pd_sub_2:any = ((<any>this.context.onKeyDown($event)) !== false);
      result = (pd_sub_2 && result);
    }
    if ((eventName == 'keypress')) {
      const pd_sub_3:any = ((<any>this.context.onKeyPress($event)) !== false);
      result = (pd_sub_3 && result);
    }
    if ((eventName == 'input')) {
      const pd_sub_4:any = ((<any>this.context.onInput($event)) !== false);
      result = (pd_sub_4 && result);
    }
    if ((eventName == 'paste')) {
      const pd_sub_5:any = ((<any>this.context.handleInputChange($event)) !== false);
      result = (pd_sub_5 && result);
    }
    return result;
  }
}