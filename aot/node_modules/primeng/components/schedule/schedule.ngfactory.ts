/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from 'primeng/components/schedule/schedule';
import * as import2 from '@angular/common/src/common_module';
import * as import3 from '@angular/common/src/localization';
import * as import4 from '@angular/core/src/di/injector';
import * as import5 from '@angular/core/src/i18n/tokens';
import * as import6 from '@angular/core/src/change_detection/change_detection_util';
import * as import7 from '@angular/core/src/linker/view';
import * as import8 from '@angular/core/src/linker/view_utils';
import * as import9 from '@angular/core/src/render/api';
import * as import10 from '@angular/core/src/metadata/view';
import * as import11 from '@angular/core/src/linker/view_type';
import * as import12 from '@angular/core/src/change_detection/constants';
import * as import13 from '@angular/core/src/linker/component_factory';
import * as import14 from '@angular/core/src/linker/element_ref';
import * as import15 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import16 from '../../../@angular/common/src/directives/ng_style.ngfactory';
import * as import17 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import18 from '@angular/common/src/directives/ng_style';
class ScheduleModuleInjector extends import0.NgModuleInjector<import1.ScheduleModule> {
  _CommonModule_0:import2.CommonModule;
  _ScheduleModule_1:import1.ScheduleModule;
  __NgLocalization_2:import3.NgLocaleLocalization;
  constructor(parent:import4.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _NgLocalization_2():import3.NgLocaleLocalization {
    if ((this.__NgLocalization_2 == null)) { (this.__NgLocalization_2 = new import3.NgLocaleLocalization(this.parent.get(import5.LOCALE_ID))); }
    return this.__NgLocalization_2;
  }
  createInternal():import1.ScheduleModule {
    this._CommonModule_0 = new import2.CommonModule();
    this._ScheduleModule_1 = new import1.ScheduleModule();
    return this._ScheduleModule_1;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.CommonModule)) { return this._CommonModule_0; }
    if ((token === import1.ScheduleModule)) { return this._ScheduleModule_1; }
    if ((token === import3.NgLocalization)) { return this._NgLocalization_2; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const ScheduleModuleNgFactory:import0.NgModuleFactory<import1.ScheduleModule> = new import0.NgModuleFactory(ScheduleModuleInjector,import1.ScheduleModule);
export class Wrapper_Schedule {
  /*private*/ _eventHandler:Function;
  context:import1.Schedule;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  /*private*/ _expr_11:any;
  /*private*/ _expr_12:any;
  /*private*/ _expr_13:any;
  /*private*/ _expr_14:any;
  /*private*/ _expr_15:any;
  /*private*/ _expr_16:any;
  /*private*/ _expr_17:any;
  /*private*/ _expr_18:any;
  /*private*/ _expr_19:any;
  /*private*/ _expr_20:any;
  /*private*/ _expr_21:any;
  /*private*/ _expr_22:any;
  /*private*/ _expr_23:any;
  /*private*/ _expr_24:any;
  /*private*/ _expr_25:any;
  /*private*/ _expr_26:any;
  /*private*/ _expr_27:any;
  /*private*/ _expr_28:any;
  /*private*/ _expr_29:any;
  /*private*/ _expr_30:any;
  /*private*/ _expr_31:any;
  /*private*/ _expr_32:any;
  /*private*/ _expr_33:any;
  /*private*/ _expr_34:any;
  /*private*/ _expr_35:any;
  /*private*/ _expr_36:any;
  /*private*/ _expr_37:any;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  subscription3:any;
  subscription4:any;
  subscription5:any;
  subscription6:any;
  subscription7:any;
  subscription8:any;
  subscription9:any;
  subscription10:any;
  subscription11:any;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import1.Schedule(p0,p1);
    this._expr_0 = import6.UNINITIALIZED;
    this._expr_1 = import6.UNINITIALIZED;
    this._expr_2 = import6.UNINITIALIZED;
    this._expr_3 = import6.UNINITIALIZED;
    this._expr_4 = import6.UNINITIALIZED;
    this._expr_5 = import6.UNINITIALIZED;
    this._expr_6 = import6.UNINITIALIZED;
    this._expr_7 = import6.UNINITIALIZED;
    this._expr_8 = import6.UNINITIALIZED;
    this._expr_9 = import6.UNINITIALIZED;
    this._expr_10 = import6.UNINITIALIZED;
    this._expr_11 = import6.UNINITIALIZED;
    this._expr_12 = import6.UNINITIALIZED;
    this._expr_13 = import6.UNINITIALIZED;
    this._expr_14 = import6.UNINITIALIZED;
    this._expr_15 = import6.UNINITIALIZED;
    this._expr_16 = import6.UNINITIALIZED;
    this._expr_17 = import6.UNINITIALIZED;
    this._expr_18 = import6.UNINITIALIZED;
    this._expr_19 = import6.UNINITIALIZED;
    this._expr_20 = import6.UNINITIALIZED;
    this._expr_21 = import6.UNINITIALIZED;
    this._expr_22 = import6.UNINITIALIZED;
    this._expr_23 = import6.UNINITIALIZED;
    this._expr_24 = import6.UNINITIALIZED;
    this._expr_25 = import6.UNINITIALIZED;
    this._expr_26 = import6.UNINITIALIZED;
    this._expr_27 = import6.UNINITIALIZED;
    this._expr_28 = import6.UNINITIALIZED;
    this._expr_29 = import6.UNINITIALIZED;
    this._expr_30 = import6.UNINITIALIZED;
    this._expr_31 = import6.UNINITIALIZED;
    this._expr_32 = import6.UNINITIALIZED;
    this._expr_33 = import6.UNINITIALIZED;
    this._expr_34 = import6.UNINITIALIZED;
    this._expr_35 = import6.UNINITIALIZED;
    this._expr_36 = import6.UNINITIALIZED;
    this._expr_37 = import6.UNINITIALIZED;
  }
  ngOnDetach(view:import7.AppView<any>,componentView:import7.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
    (this.subscription3 && this.subscription3.unsubscribe());
    (this.subscription4 && this.subscription4.unsubscribe());
    (this.subscription5 && this.subscription5.unsubscribe());
    (this.subscription6 && this.subscription6.unsubscribe());
    (this.subscription7 && this.subscription7.unsubscribe());
    (this.subscription8 && this.subscription8.unsubscribe());
    (this.subscription9 && this.subscription9.unsubscribe());
    (this.subscription10 && this.subscription10.unsubscribe());
    (this.subscription11 && this.subscription11.unsubscribe());
  }
  check_events(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.events = currValue;
      this._expr_0 = currValue;
    }
  }
  check_header(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.header = currValue;
      this._expr_1 = currValue;
    }
  }
  check_style(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.style = currValue;
      this._expr_2 = currValue;
    }
  }
  check_styleClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.styleClass = currValue;
      this._expr_3 = currValue;
    }
  }
  check_rtl(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.rtl = currValue;
      this._expr_4 = currValue;
    }
  }
  check_weekends(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.weekends = currValue;
      this._expr_5 = currValue;
    }
  }
  check_hiddenDays(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context.hiddenDays = currValue;
      this._expr_6 = currValue;
    }
  }
  check_fixedWeekCount(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this._changed = true;
      this.context.fixedWeekCount = currValue;
      this._expr_7 = currValue;
    }
  }
  check_weekNumbers(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_8,currValue))) {
      this._changed = true;
      this.context.weekNumbers = currValue;
      this._expr_8 = currValue;
    }
  }
  check_businessHours(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_9,currValue))) {
      this._changed = true;
      this.context.businessHours = currValue;
      this._expr_9 = currValue;
    }
  }
  check_height(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_10,currValue))) {
      this._changed = true;
      this.context.height = currValue;
      this._expr_10 = currValue;
    }
  }
  check_contentHeight(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_11,currValue))) {
      this._changed = true;
      this.context.contentHeight = currValue;
      this._expr_11 = currValue;
    }
  }
  check_aspectRatio(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_12,currValue))) {
      this._changed = true;
      this.context.aspectRatio = currValue;
      this._expr_12 = currValue;
    }
  }
  check_eventLimit(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_13,currValue))) {
      this._changed = true;
      this.context.eventLimit = currValue;
      this._expr_13 = currValue;
    }
  }
  check_defaultDate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_14,currValue))) {
      this._changed = true;
      this.context.defaultDate = currValue;
      this._expr_14 = currValue;
    }
  }
  check_editable(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_15,currValue))) {
      this._changed = true;
      this.context.editable = currValue;
      this._expr_15 = currValue;
    }
  }
  check_droppable(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_16,currValue))) {
      this._changed = true;
      this.context.droppable = currValue;
      this._expr_16 = currValue;
    }
  }
  check_eventStartEditable(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_17,currValue))) {
      this._changed = true;
      this.context.eventStartEditable = currValue;
      this._expr_17 = currValue;
    }
  }
  check_eventDurationEditable(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_18,currValue))) {
      this._changed = true;
      this.context.eventDurationEditable = currValue;
      this._expr_18 = currValue;
    }
  }
  check_defaultView(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_19,currValue))) {
      this._changed = true;
      this.context.defaultView = currValue;
      this._expr_19 = currValue;
    }
  }
  check_allDaySlot(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_20,currValue))) {
      this._changed = true;
      this.context.allDaySlot = currValue;
      this._expr_20 = currValue;
    }
  }
  check_allDayText(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_21,currValue))) {
      this._changed = true;
      this.context.allDayText = currValue;
      this._expr_21 = currValue;
    }
  }
  check_slotDuration(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_22,currValue))) {
      this._changed = true;
      this.context.slotDuration = currValue;
      this._expr_22 = currValue;
    }
  }
  check_slotLabelInterval(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_23,currValue))) {
      this._changed = true;
      this.context.slotLabelInterval = currValue;
      this._expr_23 = currValue;
    }
  }
  check_snapDuration(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_24,currValue))) {
      this._changed = true;
      this.context.snapDuration = currValue;
      this._expr_24 = currValue;
    }
  }
  check_scrollTime(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_25,currValue))) {
      this._changed = true;
      this.context.scrollTime = currValue;
      this._expr_25 = currValue;
    }
  }
  check_minTime(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_26,currValue))) {
      this._changed = true;
      this.context.minTime = currValue;
      this._expr_26 = currValue;
    }
  }
  check_maxTime(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_27,currValue))) {
      this._changed = true;
      this.context.maxTime = currValue;
      this._expr_27 = currValue;
    }
  }
  check_slotEventOverlap(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_28,currValue))) {
      this._changed = true;
      this.context.slotEventOverlap = currValue;
      this._expr_28 = currValue;
    }
  }
  check_nowIndicator(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_29,currValue))) {
      this._changed = true;
      this.context.nowIndicator = currValue;
      this._expr_29 = currValue;
    }
  }
  check_dragRevertDuration(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_30,currValue))) {
      this._changed = true;
      this.context.dragRevertDuration = currValue;
      this._expr_30 = currValue;
    }
  }
  check_dragOpacity(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_31,currValue))) {
      this._changed = true;
      this.context.dragOpacity = currValue;
      this._expr_31 = currValue;
    }
  }
  check_dragScroll(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_32,currValue))) {
      this._changed = true;
      this.context.dragScroll = currValue;
      this._expr_32 = currValue;
    }
  }
  check_eventOverlap(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_33,currValue))) {
      this._changed = true;
      this.context.eventOverlap = currValue;
      this._expr_33 = currValue;
    }
  }
  check_eventConstraint(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_34,currValue))) {
      this._changed = true;
      this.context.eventConstraint = currValue;
      this._expr_34 = currValue;
    }
  }
  check_locale(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_35,currValue))) {
      this._changed = true;
      this.context.locale = currValue;
      this._expr_35 = currValue;
    }
  }
  check_eventRender(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_36,currValue))) {
      this._changed = true;
      this.context.eventRender = currValue;
      this._expr_36 = currValue;
    }
  }
  check_dayRender(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_37,currValue))) {
      this._changed = true;
      this.context.dayRender = currValue;
      this._expr_37 = currValue;
    }
  }
  ngDoCheck(view:import7.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) {
      if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); }
      this.context.ngDoCheck();
    }
    return changed;
  }
  checkHost(view:import7.AppView<any>,componentView:import7.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import7.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean,emit3:boolean,emit4:boolean,emit5:boolean,emit6:boolean,emit7:boolean,emit8:boolean,emit9:boolean,emit10:boolean,emit11:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.onDayClick.subscribe(_eventHandler.bind(view,'onDayClick'))); }
    if (emit1) { (this.subscription1 = this.context.onDrop.subscribe(_eventHandler.bind(view,'onDrop'))); }
    if (emit2) { (this.subscription2 = this.context.onEventClick.subscribe(_eventHandler.bind(view,'onEventClick'))); }
    if (emit3) { (this.subscription3 = this.context.onEventMouseover.subscribe(_eventHandler.bind(view,'onEventMouseover'))); }
    if (emit4) { (this.subscription4 = this.context.onEventMouseout.subscribe(_eventHandler.bind(view,'onEventMouseout'))); }
    if (emit5) { (this.subscription5 = this.context.onEventDragStart.subscribe(_eventHandler.bind(view,'onEventDragStart'))); }
    if (emit6) { (this.subscription6 = this.context.onEventDragStop.subscribe(_eventHandler.bind(view,'onEventDragStop'))); }
    if (emit7) { (this.subscription7 = this.context.onEventDrop.subscribe(_eventHandler.bind(view,'onEventDrop'))); }
    if (emit8) { (this.subscription8 = this.context.onEventResizeStart.subscribe(_eventHandler.bind(view,'onEventResizeStart'))); }
    if (emit9) { (this.subscription9 = this.context.onEventResizeStop.subscribe(_eventHandler.bind(view,'onEventResizeStop'))); }
    if (emit10) { (this.subscription10 = this.context.onEventResize.subscribe(_eventHandler.bind(view,'onEventResize'))); }
    if (emit11) { (this.subscription11 = this.context.viewRender.subscribe(_eventHandler.bind(view,'viewRender'))); }
  }
}
var renderType_Schedule_Host:import9.RenderComponentType = import8.createRenderComponentType('',0,import10.ViewEncapsulation.None,([] as any[]),{});
class View_Schedule_Host0 extends import7.AppView<any> {
  _el_0:any;
  compView_0:import7.AppView<import1.Schedule>;
  _Schedule_0_3:Wrapper_Schedule;
  constructor(viewUtils:import8.ViewUtils,parentView:import7.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_Schedule_Host0,renderType_Schedule_Host,import11.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import12.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import13.ComponentRef<any> {
    this._el_0 = import8.selectOrCreateRenderHostElement(this.renderer,'p-schedule',import8.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_Schedule0(this.viewUtils,this,0,this._el_0);
    this._Schedule_0_3 = new Wrapper_Schedule(new import14.ElementRef(this._el_0),this.injectorGet(import15.IterableDiffers,this.parentIndex));
    this.compView_0.create(this._Schedule_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import13.ComponentRef_<any>(0,this,this._el_0,this._Schedule_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.Schedule) && (0 === requestNodeIndex))) { return this._Schedule_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._Schedule_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
    if (!throwOnChange) { this._Schedule_0_3.context.ngAfterViewChecked(); }
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._Schedule_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const ScheduleNgFactory:import13.ComponentFactory<import1.Schedule> = new import13.ComponentFactory<import1.Schedule>('p-schedule',View_Schedule_Host0,import1.Schedule);
const styles_Schedule:any[] = ([] as any[]);
var renderType_Schedule:import9.RenderComponentType = import8.createRenderComponentType('',0,import10.ViewEncapsulation.None,styles_Schedule,{});
export class View_Schedule0 extends import7.AppView<import1.Schedule> {
  _el_0:any;
  _NgStyle_0_3:import16.Wrapper_NgStyle;
  /*private*/ _expr_2:any;
  constructor(viewUtils:import8.ViewUtils,parentView:import7.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_Schedule0,renderType_Schedule,import11.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import12.ChangeDetectorStatus.CheckAlways);
    this._expr_2 = import6.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import13.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import8.createRenderElement(this.renderer,parentRenderNode,'div',import8.EMPTY_INLINE_ARRAY,(null as any));
    this._NgStyle_0_3 = new import16.Wrapper_NgStyle(this.parentView.injectorGet(import17.KeyValueDiffers,this.parentIndex),new import14.ElementRef(this._el_0),this.renderer);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import18.NgStyle) && (0 === requestNodeIndex))) { return this._NgStyle_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.context.style;
    this._NgStyle_0_3.check_ngStyle(currVal_0_0_0,throwOnChange,false);
    this._NgStyle_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_2:any = this.context.styleClass;
    if (import8.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      this.renderer.setElementProperty(this._el_0,'className',currVal_2);
      this._expr_2 = currVal_2;
    }
  }
}