/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from 'primeng/components/toolbar/toolbar';
import * as import2 from '@angular/common/src/common_module';
import * as import3 from '@angular/common/src/localization';
import * as import4 from '@angular/core/src/di/injector';
import * as import5 from '@angular/core/src/i18n/tokens';
import * as import6 from '@angular/core/src/change_detection/change_detection_util';
import * as import7 from '@angular/core/src/linker/view';
import * as import8 from '@angular/core/src/linker/view_utils';
import * as import9 from '@angular/core/src/render/api';
import * as import10 from '@angular/core/src/metadata/view';
import * as import11 from '@angular/core/src/linker/view_type';
import * as import12 from '@angular/core/src/change_detection/constants';
import * as import13 from '@angular/core/src/linker/component_factory';
import * as import14 from '../../../@angular/common/src/directives/ng_class.ngfactory';
import * as import15 from '../../../@angular/common/src/directives/ng_style.ngfactory';
import * as import16 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import17 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import18 from '@angular/core/src/linker/element_ref';
import * as import19 from '@angular/common/src/directives/ng_class';
import * as import20 from '@angular/common/src/directives/ng_style';
class ToolbarModuleInjector extends import0.NgModuleInjector<import1.ToolbarModule> {
  _CommonModule_0:import2.CommonModule;
  _ToolbarModule_1:import1.ToolbarModule;
  __NgLocalization_2:import3.NgLocaleLocalization;
  constructor(parent:import4.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _NgLocalization_2():import3.NgLocaleLocalization {
    if ((this.__NgLocalization_2 == null)) { (this.__NgLocalization_2 = new import3.NgLocaleLocalization(this.parent.get(import5.LOCALE_ID))); }
    return this.__NgLocalization_2;
  }
  createInternal():import1.ToolbarModule {
    this._CommonModule_0 = new import2.CommonModule();
    this._ToolbarModule_1 = new import1.ToolbarModule();
    return this._ToolbarModule_1;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.CommonModule)) { return this._CommonModule_0; }
    if ((token === import1.ToolbarModule)) { return this._ToolbarModule_1; }
    if ((token === import3.NgLocalization)) { return this._NgLocalization_2; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const ToolbarModuleNgFactory:import0.NgModuleFactory<import1.ToolbarModule> = new import0.NgModuleFactory(ToolbarModuleInjector,import1.ToolbarModule);
export class Wrapper_Toolbar {
  /*private*/ _eventHandler:Function;
  context:import1.Toolbar;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  constructor() {
    this._changed = false;
    this.context = new import1.Toolbar();
    this._expr_0 = import6.UNINITIALIZED;
    this._expr_1 = import6.UNINITIALIZED;
  }
  ngOnDetach(view:import7.AppView<any>,componentView:import7.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_style(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.style = currValue;
      this._expr_0 = currValue;
    }
  }
  check_styleClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.styleClass = currValue;
      this._expr_1 = currValue;
    }
  }
  ngDoCheck(view:import7.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import7.AppView<any>,componentView:import7.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import7.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_Toolbar_Host:import9.RenderComponentType = import8.createRenderComponentType('',0,import10.ViewEncapsulation.None,([] as any[]),{});
class View_Toolbar_Host0 extends import7.AppView<any> {
  _el_0:any;
  compView_0:import7.AppView<import1.Toolbar>;
  _Toolbar_0_3:Wrapper_Toolbar;
  constructor(viewUtils:import8.ViewUtils,parentView:import7.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_Toolbar_Host0,renderType_Toolbar_Host,import11.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import12.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import13.ComponentRef<any> {
    this._el_0 = import8.selectOrCreateRenderHostElement(this.renderer,'p-toolbar',import8.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_Toolbar0(this.viewUtils,this,0,this._el_0);
    this._Toolbar_0_3 = new Wrapper_Toolbar();
    this.compView_0.create(this._Toolbar_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import13.ComponentRef_<any>(0,this,this._el_0,this._Toolbar_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.Toolbar) && (0 === requestNodeIndex))) { return this._Toolbar_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._Toolbar_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
}
export const ToolbarNgFactory:import13.ComponentFactory<import1.Toolbar> = new import13.ComponentFactory<import1.Toolbar>('p-toolbar',View_Toolbar_Host0,import1.Toolbar);
const styles_Toolbar:any[] = ([] as any[]);
var renderType_Toolbar:import9.RenderComponentType = import8.createRenderComponentType('',1,import10.ViewEncapsulation.None,styles_Toolbar,{});
export class View_Toolbar0 extends import7.AppView<import1.Toolbar> {
  _text_0:any;
  _el_1:any;
  _NgClass_1_3:import14.Wrapper_NgClass;
  _NgStyle_1_4:import15.Wrapper_NgStyle;
  _text_2:any;
  _text_3:any;
  _text_4:any;
  constructor(viewUtils:import8.ViewUtils,parentView:import7.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_Toolbar0,renderType_Toolbar,import11.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import12.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import13.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n        ',(null as any));
    this._el_1 = import8.createRenderElement(this.renderer,parentRenderNode,'div',import8.EMPTY_INLINE_ARRAY,(null as any));
    this._NgClass_1_3 = new import14.Wrapper_NgClass(this.parentView.injectorGet(import16.IterableDiffers,this.parentIndex),this.parentView.injectorGet(import17.KeyValueDiffers,this.parentIndex),new import18.ElementRef(this._el_1),this.renderer);
    this._NgStyle_1_4 = new import15.Wrapper_NgStyle(this.parentView.injectorGet(import17.KeyValueDiffers,this.parentIndex),new import18.ElementRef(this._el_1),this.renderer);
    this._text_2 = this.renderer.createText(this._el_1,'\n            ',(null as any));
    this.projectNodes(this._el_1,0);
    this._text_3 = this.renderer.createText(this._el_1,'\n        ',(null as any));
    this._text_4 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._text_3,
      this._text_4
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import19.NgClass) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 3)))) { return this._NgClass_1_3.context; }
    if (((token === import20.NgStyle) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 3)))) { return this._NgStyle_1_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1_0_0:any = this.context.styleClass;
    this._NgClass_1_3.check_klass(currVal_1_0_0,throwOnChange,false);
    const currVal_1_0_1:any = 'ui-toolbar ui-widget ui-widget-header ui-corner-all ui-helper-clearfix';
    this._NgClass_1_3.check_ngClass(currVal_1_0_1,throwOnChange,false);
    this._NgClass_1_3.ngDoCheck(this,this._el_1,throwOnChange);
    const currVal_1_1_0:any = this.context.style;
    this._NgStyle_1_4.check_ngStyle(currVal_1_1_0,throwOnChange,false);
    this._NgStyle_1_4.ngDoCheck(this,this._el_1,throwOnChange);
  }
}